name: Build and Release tsidp

on:
  schedule:
    # Check for new releases daily at 6 AM UTC
    - cron: "0 6 * * *"
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [main]

env:
  GO_VERSION: "1.24"

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      new-release: ${{ steps.check.outputs.new-release }}
      latest-tag: ${{ steps.check.outputs.latest-tag }}
    steps:
      - name: Check for new Tailscale release
        id: check
        run: |
          # Get latest Tailscale release
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases/latest | jq -r .tag_name)
          echo "Latest Tailscale release: $LATEST_RELEASE"

          # Check if we already have a release for this version
          # Use curl with silent fail and check HTTP status code
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/tsidp-$LATEST_RELEASE)

          if [ "$HTTP_STATUS" = "404" ]; then
            echo "new-release=true" >> $GITHUB_OUTPUT
            echo "latest-tag=$LATEST_RELEASE" >> $GITHUB_OUTPUT
            echo "New release found: $LATEST_RELEASE"
          else
            echo "new-release=false" >> $GITHUB_OUTPUT
            echo "No new release found (HTTP status: $HTTP_STATUS)"
          fi

  build-and-release:
    needs: check-release
    if: needs.check-release.outputs.new-release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout Tailscale
        run: |
          RELEASE_TAG="${{ needs.check-release.outputs.latest-tag }}"
          if [ -z "$RELEASE_TAG" ]; then
            # Fallback for manual runs
            RELEASE_TAG=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases/latest | jq -r .tag_name)
          fi

          echo "Building Tailscale version: $RELEASE_TAG"
          git clone --depth 1 --branch $RELEASE_TAG https://github.com/tailscale/tailscale.git
          cd tailscale

      - name: Build tsidp
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          cd tailscale

          # Build tsidp binary
          go build -ldflags="-s -w" -o tsidp-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/tsidp

          # Verify the binary was created
          ls -la tsidp-*

          # Create info file
          echo "Tailscale version: ${{ needs.check-release.outputs.latest-tag }}" > tsidp-${{ matrix.goos }}-${{ matrix.goarch }}.info
          echo "Built on: $(date)" >> tsidp-${{ matrix.goos }}-${{ matrix.goarch }}.info
          echo "Platform: ${{ matrix.goos }}/${{ matrix.goarch }}" >> tsidp-${{ matrix.goos }}-${{ matrix.goarch }}.info

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tsidp-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            tailscale/tsidp-*
          retention-days: 30

  create-release:
    needs: [check-release, build-and-release]
    if: needs.check-release.outputs.new-release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Prepare release assets
        run: |
          mkdir -p release-assets

          # Move all binaries to release assets directory
          find . -name "tsidp-*" -type f -exec mv {} release-assets/ \;

          # List what we're releasing
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: tsidp-${{ needs.check-release.outputs.latest-tag }}
          name: tsidp ${{ needs.check-release.outputs.latest-tag }}
          body: |
            # tsidp Binary Release

            Built from Tailscale ${{ needs.check-release.outputs.latest-tag }}

            ## Available Binaries:
            - Linux (amd64, arm64)
            - macOS (amd64, arm64) 

            ## Usage:
            1. Download the appropriate binary for your platform
            2. Make it executable: `chmod +x tsidp-*` (Unix systems)
            3. Run: `./tsidp-* --help`

            This release was automatically built and published when Tailscale ${{ needs.check-release.outputs.latest-tag }} was released.
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
